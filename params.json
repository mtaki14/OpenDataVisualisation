{"name":"Opendatavisualisation","tagline":"OpenDataCw1","body":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"utf-8\">\r\n\r\n    <title>Collapsible Tree Example</title>\r\n\r\n    <style>\r\n\r\n\t.node circle {\r\n\t  fill: #fff;\r\n\t  stroke: steelblue;\r\n\t  stroke-width: 3px;\r\n\t}\r\n\r\n\t.node text { font: 12px sans-serif; }\r\n\r\n\t.link {\r\n\t  fill: none;\r\n\t  stroke: #ccc;\r\n\t  stroke-width: 2px;\r\n\t}\r\n\t\r\n    </style>\r\n\r\n  </head>\r\n\r\n  <body>\r\n\r\n<!-- load the d3.js library -->\t\r\n<script src=\"http://d3js.org/d3.v3.min.js\"></script>\r\n\t\r\n<script>\r\n\r\n// ************** Generate the tree diagram\t *****************\r\nvar margin = {top: 20, right: 120, bottom: 20, left: 120},\r\n\twidth = 960 - margin.right - margin.left,\r\n\theight = 500 - margin.top - margin.bottom;\r\n\t\r\nvar i = 0;\r\n\r\nvar tree = d3.layout.tree()\r\n\t.size([height, width]);\r\n\r\nvar diagonal = d3.svg.diagonal()\r\n\t.projection(function(d) { return [d.y, d.x]; });\r\n\r\nvar svg = d3.select(\"body\").append(\"svg\")\r\n\t.attr(\"width\", width + margin.right + margin.left)\r\n\t.attr(\"height\", height + margin.top + margin.bottom)\r\n  .append(\"g\")\r\n\t.attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n// load the external data\r\nd3.csv(\"treedata.csv\", function(error, data) {\r\n\r\n// *********** Convert flat data into a nice tree ***************\r\n// create a name: node map\r\nvar dataMap = data.reduce(function(map, node) {\r\n\tmap[node.name] = node;\r\n\treturn map;\r\n}, {});\r\n\r\n// create the tree array\r\nvar treeData = [];\r\ndata.forEach(function(node) {\r\n\t// add to parent\r\n\tvar parent = dataMap[node.parent];\r\n\tif (parent) {\r\n\t\t// create child array if it doesn't exist\r\n\t\t(parent.children || (parent.children = []))\r\n\t\t\t// add node to child array\r\n\t\t\t.push(node);\r\n\t} else {\r\n\t\t// parent is null or missing\r\n\t\ttreeData.push(node);\r\n\t}\r\n});\r\n\r\n  root = treeData[0];\r\n  update(root);\r\n});\r\n\r\nfunction update(source) {\r\n\r\n  // Compute the new tree layout.\r\n  var nodes = tree.nodes(root).reverse(),\r\n\t  links = tree.links(nodes);\r\n\r\n  // Normalize for fixed-depth.\r\n  nodes.forEach(function(d) { d.y = d.depth * 180; });\r\n\r\n  // Declare the nodesâ€¦\r\n  var node = svg.selectAll(\"g.node\")\r\n\t  .data(nodes, function(d) { return d.id || (d.id = ++i); });\r\n\r\n  // Enter the nodes.\r\n  var nodeEnter = node.enter().append(\"g\")\r\n\t  .attr(\"class\", \"node\")\r\n\t  .attr(\"transform\", function(d) { \r\n\t\t  return \"translate(\" + d.y + \",\" + d.x + \")\"; });\r\n\r\n  nodeEnter.append(\"circle\")\r\n\t  .attr(\"r\", 10)\r\n\t  .style(\"fill\", \"#fff\");\r\n\r\n  nodeEnter.append(\"text\")\r\n\t  .attr(\"x\", function(d) { \r\n\t\t  return d.children || d._children ? -13 : 13; })\r\n\t  .attr(\"dy\", \".35em\")\r\n\t  .attr(\"text-anchor\", function(d) { \r\n\t\t  return d.children || d._children ? \"end\" : \"start\"; })\r\n\t  .text(function(d) { return d.name; })\r\n\t  .style(\"fill-opacity\", 1);\r\n\r\n  // Declare the linksâ€¦\r\n  var link = svg.selectAll(\"path.link\")\r\n\t  .data(links, function(d) { return d.target.id; });\r\n\r\n  // Enter the links.\r\n  link.enter().insert(\"path\", \"g\")\r\n\t  .attr(\"class\", \"link\")\r\n\t  .attr(\"d\", diagonal);\r\n\r\n}\r\n\r\n</script>\r\n\t\r\n  </body>\r\n</html>","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}